substitutions:
  devicename: ttgocam
  friendly_name: esp32cam

esphome:
  name: espcam

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "Gr2KEVJhhpsleoop6X3i7n51KvBBoFHrRS+gjtwAxgU="

ota:
  password: "02aa6c52cb4649b322d63bf5abef675e"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Espcam Fallback Hotspot"
    password: "uEhJnB07jp4a"

captive_portal:


binary_sensor:
  - platform: gpio
    pin: GPIO19 #33
    name: $friendly_name PIR
    device_class: motion

  - platform: gpio
    pin:
      number: GPIO15 #34
#      mode: INPUT_PULLUP
      inverted: True
    name: $friendly_name Button

  - platform: status
    name: $friendly_name Status

sensor:
  - platform: wifi_signal
    name: $friendly_name WiFi Signal
    update_interval: 10s
  - platform: uptime
    name: $friendly_name Uptime
  - platform: bme280
    temperature:
      name: "Outside Temperature"
      id: bme280_temperature
      oversampling: 16x
    pressure:
      name: "Outside Pressure"
      id: bme280_pressure
    humidity:
      name: "Outside Humidity"
      id: bme280_humidity
    address: 0x76
    update_interval: 60s
  - platform: template
    name: "Dew Point"
    lambda: |-
      return (243.5*(log(id(bme280_humidity).state/100)+((17.67*id(bme280_temperature).state)/
      (243.5+id(bme280_temperature).state)))/(17.67-log(id(bme280_humidity).state/100)-
      ((17.67*id(bme280_temperature).state)/(243.5+id(bme280_temperature).state))));
    unit_of_measurement: °C
    icon: 'mdi:thermometer-alert'
  - platform: template
    name: "Altitude"
    lambda: |-
      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note
      return ((id(bme280_temperature).state + 273.15) / 0.0065) *
        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(bme280_pressure).state), 0.190234) - 1); // in meter
#    update_interval: 15s
    icon: 'mdi:signal'
    unit_of_measurement: 'm'
  - platform: template
    name: "Absolute Humidity"
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(bme280_temperature).state) /
        (id(bme280_temperature).state + 243.5)) * id(bme280_humidity).state * mw) /
        ((273.15 + id(bme280_temperature).state) * r); // in grams/m^3
    accuracy_decimals: 2
#    update_interval: 15s
    icon: 'mdi:water'
    unit_of_measurement: 'g/m³'

esp32_camera:
  name: $friendly_name Camera
  external_clock:
    pin: GPIO4 #32 not sure!
    frequency: 20MHz
  i2c_pins:
    sda: GPIO18 #13
    scl: GPIO23 #12
  data_pins: [GPIO34, GPIO13, GPIO14, GPIO35, GPIO39, GPIO38, GPIO37, GPIO36] #[GPIO5, GPIO14, GPIO4, GPIO15, GPIO18, GPIO23, GPIO36, GPIO39]
  vsync_pin: GPIO5 #27
  href_pin: GPIO27 #25
  pixel_clock_pin: GPIO25 #19
  # power_down_pin: GPIO26 No PWD GPIO existing
  resolution: 640x480
  jpeg_quality: 10
  vertical_flip: false
  horizontal_mirror: false

i2c:
  sda: GPIO21
  scl: GPIO22


font:
  - file: "Roboto-Regular.ttf"
    id: tnr1
    size: 20
  - file: "Roboto-Regular.ttf"
    id: tnr2
    size: 35

time:
  - platform: homeassistant
    id: homeassistant_time

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      it.strftime(64, 0, id(tnr1), TextAlign::TOP_CENTER,"%d-%m-%Y", id(homeassistant_time).now());
      it.strftime(64, 64, id(tnr2), TextAlign::BASELINE_CENTER, "%H:%M", id(homeassistant_time).now());
